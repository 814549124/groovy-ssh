/*
 * Examples.
 * 
 * Prepare following to execute tasks in this example.
 * - start sshd
 * - generate key pair (use ssh-keygen)
 * - add your pubic key to authorized_keys
 * - make sure that you can log in without any password
 * 
 * Or, rewrite host or user as you like.
 * 
 */
import org.hidetake.gradle.ssh.*

buildscript {
	repositories {
		mavenCentral()
		flatDir { dirs '../build/libs' }
	}

	dependencies {
		classpath 'org.hidetake:gradle-ssh-plugin:1.0'
		classpath 'com.jcraft:jsch:0.1.48'
	}
}

apply plugin: 'ssh'

ssh {
	config(StrictHostKeyChecking: 'no')
}

remotes {
	someServer {
		host = 'localhost' // TODO: change to your host name
		user = System.properties['user.name']
		identity = file("${System.properties['user.home']}/.ssh/id_rsa")
	}
	(1..3).each { serverId ->
		"myServer_${serverId}" {
			host = 'localhost' // TODO: change to your host name
			user = System.properties['user.name']
			identity = file("${System.properties['user.home']}/.ssh/id_rsa")
		}
	}
}

task simpleTask(type: Ssh) {
	description 'execute a command on default remote'
	session(remotes.someServer) {
		execute 'env'
	}
}

task errorCase(type: Ssh) {
	description 'execute bad command for explaining error cases'
	session(remotes.someServer) {
		execute 'touch /root/test'
		execute 'uname -a'
	}
}

task concurrentExecution(type: Ssh) {
	description 'execute commands concurrently on the remote'
	session(remotes.someServer) {
		(1..5).each { i ->
			executeBackground "echo ${i} && sleep ${i} && echo ${i}"
		}
	}
}

task uname {
	description 'execute uname on all remotes'
	dependsOn remotes.collect { Remote remote ->
		task "uname_${remote.name}" (type: Ssh) {
			description "execute uname on ${remote.name}"
			session(remote) {
				executeBackground 'uname -a'
			}
		}
	}
}

task taskIncludingSsh << {
	sshexec {
		session(remotes.someServer) {
			execute 'env'
		}
	}
}
