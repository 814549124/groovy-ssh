plugins {
    id 'groovy'
    id 'jacoco'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.0'
    id 'com.github.johnrengelman.shadow' version '1.2.0'
}

// Set product version if tag is given on Travis CI
System.getenv('TRAVIS_TAG')?.eachMatch(/^v([\d.]+)$/) { m -> project.version = m[1] }

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

repositories {
    jcenter()
}

sourceSets {
    cli
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.6'
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'com.jcraft:jsch:0.1.51'
    compile 'com.jcraft:jsch.agentproxy.connector-factory:0.0.7'
    compile 'com.jcraft:jsch.agentproxy.jsch:0.0.7'

    cliRuntime 'ch.qos.logback:logback-classic:1.1.2'
    cliRuntime 'commons-cli:commons-cli:1.2'

    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile 'org.apache.sshd:sshd-core:0.12.0'
    testCompile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'

    testRuntime 'cglib:cglib-nodep:3.1'
    testRuntime 'org.objenesis:objenesis:2.1'
    testRuntime 'org.bouncycastle:bcpkix-jdk15on:1.51'
    testRuntime configurations.cliRuntime
}

processResources {
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: ['version': project.version])
}

/*
 * Tasks and settings for test
 */
jacoco {
    toolVersion = '0.7.1.201405082137'
}

check.dependsOn jacocoTestReport

if (System.getProperty('os.name') == 'Linux') {
    tasks.withType(JavaForkOptions) {
        systemProperty 'java.security.egd', 'file:/dev/./urandom'
    }
}

/*
 * Tasks for release on Bintray
 */
task javadocJar(type: Jar, dependsOn: groovydoc) {
    from "${buildDir}/docs/groovydoc"
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

shadowJar {
    manifest {
        attributes 'Main-Class': 'org.hidetake.groovy.ssh.Main'
    }
    from project.sourceSets.cli.output
    configurations = [project.configurations.runtime, project.configurations.cliRuntime]
    classifier = ''
    version = ''
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = DELEGATE_FIRST
                    name project.name
                    description project.description
                    url project.property('pom.url')
                    scm {
                        url project.property('pom.scm.url')
                        connection project.property('pom.scm.connection')
                    }
                    licenses {
                        license {
                            name project.property('pom.license.name')
                            url project.property('pom.license.url')
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id project.property('pom.developer.id')
                            name project.property('pom.developer.name')
                        }
                    }
                }
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER') ?: project.properties.bintrayUser
    key  = System.getenv('BINTRAY_KEY')  ?: project.properties.bintrayKey
    publications = ['maven']
    pkg {
        repo = 'maven'
        name = project.name
    }
}

tasks.bintrayUpload.doFirst {
    assert !project.version.contains('SNAPSHOT')
}

task install(dependsOn: 'publishMavenPublicationToMavenLocal')

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
