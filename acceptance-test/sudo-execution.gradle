
remotes {
    sudoWithPassword {
        host = 'localhost'
        user = "user${randomInt()}p"
        password = "pass${randomInt()}"
    }
    sudoNoPassword {
        host = 'localhost'
        user = "user${randomInt()}n"
        password = "pass${randomInt()}"
    }
}


feature('executing a privileged command by sudo') {
    task 'executeSudoWithPassword'
    category 'aggressiveTest'
}

task executeSudoWithPassword(type: SshTask) {
    dependsOn   'createUserForSudoWithPassword'
    finalizedBy 'deleteUserForSudoWithPassword'

    session(remotes.sudoWithPassword) {
        ext.whoami = executeSudo('whoami', pty: true)
    }
    doLast {
        assert whoami == 'root'
    }
}

task createUserForSudoWithPassword(type: SshTask) {
    finalizedBy 'deleteUserForSudoWithPassword'

    session(remotes.localhost) {
        def username = remotes.sudoWithPassword.user
        def password = remotes.sudoWithPassword.password
        execute("sudo useradd -m $username")
        execute("sudo passwd $username", interaction: {
            when(partial: ~/.+[Pp]assword: */) {
                standardInput << password << '\n'
            }
        })
        execute("echo '$username ALL=(ALL) ALL' > /tmp/$username")
        execute("sudo chmod 440 /tmp/$username")
        execute("sudo chown 0.0 /tmp/$username")
        execute("sudo mv /tmp/$username /etc/sudoers.d")
    }
}

task deleteUserForSudoWithPassword(type: SshTask) {
    session(remotes.localhost) {
        def username = remotes.sudoWithPassword.user
        execute("sudo rm -v /etc/sudoers.d/$username")
        execute("sudo userdel -r $username")
    }
}


feature('executing a privileged command by sudo without password') {
    task 'executeSudoNoPassword'
    category 'aggressiveTest'
}

task executeSudoNoPassword(type: SshTask) {
    dependsOn 'createUserForSudoNoPassword'
    finalizedBy 'deleteUserForSudoNoPassword'

    session(remotes.localhost) {
        ext.whoami = executeSudo('whoami', pty: true)
    }
    doLast {
        assert whoami == 'root'
    }
}

task createUserForSudoNoPassword(type: SshTask) {
    finalizedBy 'deleteUserForSudoNoPassword'

    session(remotes.localhost) {
        def username = remotes.sudoNoPassword.user
        def password = remotes.sudoNoPassword.password
        execute("sudo useradd -m $username")
        execute("sudo passwd $username", interaction: {
            when(partial: ~/.+[Pp]assword: */) {
                standardInput << password << '\n'
            }
        })
        execute("echo '$username ALL=(ALL) NOPASSWD: ALL' > /tmp/$username")
        execute("sudo chmod 440 /tmp/$username")
        execute("sudo chown 0.0 /tmp/$username")
        execute("sudo mv /tmp/$username /etc/sudoers.d")
    }
}

task deleteUserForSudoNoPassword(type: SshTask) {
    session(remotes.localhost) {
        def username = remotes.sudoNoPassword.user
        execute("sudo rm -v /etc/sudoers.d/$username")
        execute("sudo userdel -r $username")
    }
}
