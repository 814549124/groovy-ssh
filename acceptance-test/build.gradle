description 'Automated acceptance test with SSH server'

buildscript {
    def version = file('../gradle.properties').withReader {
        def properties = new Properties()
        properties.load(it)
        properties.version
    }
    repositories {
        ivy { url = '../build/ivy' }
        mavenCentral()
    }
    dependencies {
        classpath "org.hidetake:gradle-ssh-plugin:$version"
    }
}

class FeatureDelegate {
    String task = null
    final List<String> categories = []

    void task(String path) {
        assert task == null, 'feature task is already set'
        task = path
    }

    void category(String name) {
        categories << name
    }
}

def feature(String name, Closure featureClosure) {
    def feature = new FeatureDelegate()
    featureClosure.delegate = feature
    featureClosure.resolveStrategy = Closure.DELEGATE_FIRST
    featureClosure.call()

    if (feature.task) {
        logger.info("Added feature: $name")
        feature.categories.each { project.tasks.getByName(it).dependsOn(feature.task) }
        if (feature.categories.empty) {
            logger.warn "Warning: feature `$name` does not belong to any category"
        }
    } else {
        logger.warn "Warning: empty feature `$name`"
    }
}

task test {
    description = 'Run tests'
}

task testWithAgent {
    description = 'Run tests which require ssh-agent'
}

task testGateway {
    description = 'Run tests of gateway (separate to turn off host key checking)'
}

task aggressiveTest {
    description = 'Run tests which may cause modification of the environment'
}

apply from: 'features.gradle'
