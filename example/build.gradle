/**
 * Examples of the Gradle SSH plugin.
 *
 * Preconditions:
 * - SSH service is running.
 * - Public key authentication is enabled.
 * - Your public key is placed at ~/.ssh/id_rsa and needs no pass-phrase.
 *
 */

buildscript {
    def productProperties = new Properties()
    file('../gradle.properties').withReader { Reader reader -> productProperties.load reader }

    repositories {
        mavenCentral()
    }

    dependencies {
        def localBuild = file("../build/libs/gradle-ssh-plugin-${productProperties.version}.jar")
        if (localBuild.exists()) {
            println "Using local build: ${localBuild.path}"
            classpath files(localBuild)
            classpath 'com.jcraft:jsch:0.1.50'
        } else {
            println "Using released build in the Maven central repository"
            classpath "org.hidetake:gradle-ssh-plugin:${productProperties.version}"
        }
    }
}

// Applies the plugin.
apply plugin: 'ssh'

ssh {
    // Disables known hosts checking.
    config(StrictHostKeyChecking: 'no')
}

// Defines remote hosts and roles.
remotes {
    localhost {
        role 'testServers'
        host = 'localhost'
        user = System.properties['user.name']
        identity = file("${System.properties['user.home']}/.ssh/id_rsa")
    }
    yourhost {
        role 'testServers'
        // Change here to your real host!
        host = '192.168.1.1'
        user = 'someone'
        password = 'change'
    }
}

task executeCommand(type: SshTask) {
    description 'Executes a command on a host'
    session(remotes.localhost) {
        println description
        execute 'env'
    }
}

task byRole(type: SshTask) {
    description 'Executes a command on multiple hosts by the role'
    session(remotes.role('testServers')) {
        println description
        execute 'env'
    }
}

task obtainValue(type: SshTask) {
    description 'Obtains a value from the command'
    // suppress command output
    outputLogLevel = LogLevel.DEBUG
    session(remotes.localhost) {
        println description
        def targetArchitecture = execute('uname -sm')
        println "Target architecture is ${targetArchitecture}."
    }
}

task executeConcurrently(type: SshTask) {
    description 'Executes multiple commands concurrently'
    doFirst {
        println description
    }
    session(remotes.localhost) {
        [0, 2, 4].each { i ->
            executeBackground "sleep ${i} && echo -n ${i}-\${SSH_CONNECTION}- && date"
        }
    }
    session(remotes.localhost) {
        [1, 3, 5].each { i ->
            executeBackground "sleep ${i} && echo -n ${i}-\${SSH_CONNECTION}- && date"
        }
    }
}

task executeSudoNoPwd(type: SshTask) {
    description 'Executes a command as sudo'
    session(remotes.localhost) {
        println description
        execute('sudo env', pty: true)
    }
}

task executeSudoWithPwd(type: SshTask) {
    description 'Executes a command as sudo supporting the provision of a password for the sudo command'
    doFirst {
        assert project.hasProperty('sudoPwd'), "You must provide password for sudo command: -PsudoPwd=..."
        // of course you could just set the password in the remotes configuration,
        // probably reading the password as a property from ~/.gradle/gradle.properties
        remotes.localhost.password = project.sudoPwd
    }
    session(remotes.localhost) {
        println description
        executeSudo('env', pty: true)
    }
}

task executeBadCommand(type: SshTask) {
    description 'Executes a bad command'
    session(remotes.localhost) {
        println description
        // may be failed
        execute 'touch /root/test'
    }
}

task executeBadCommandInBackground(type: SshTask) {
    description 'Executes a bad command in background'
    session(remotes.localhost) {
        println description
        // may be failed
        executeBackground 'touch /root/test'
    }
}

task executeSshInTask << {
    description 'Executes a command in the task'
    def command = "date"
    println command
    sshexec {
        session(remotes.localhost) {
            execute command
        }
    }
}

//
// Above remote hosts are still valid in child projects.
// Run Gradle with -i flag to see remote hosts in each projects.
//
void showRemotes(Project baseProject) {
    logger.info('({}) rootProject.remotes = {}', baseProject, baseProject.parent.remotes)
    logger.info('({}) project.remotes     = {}', baseProject, baseProject.remotes)
}
