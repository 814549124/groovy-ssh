/*
 * Examples.
 * 
 * Prepare following to execute tasks in this example.
 * - start sshd
 * - generate key pair (use ssh-keygen)
 * - add your pubic key to authorized_keys
 * - make sure that you can log in without any password
 * 
 * Or, rewrite host or user as you like.
 * 
 */
buildscript {
	if (System.properties.useGitHubRelease) {
		repositories {
			mavenCentral()
			add(new org.apache.ivy.plugins.resolver.URLResolver()) {
				name = 'GitHub'
				addArtifactPattern 'http://cloud.github.com/downloads/int128/[module]/[module]-[revision].[ext]'
			}
		}
		dependencies {
			classpath 'org.hidetake:gradle-ssh-plugin:0.1.0'
			classpath 'com.jcraft:jsch:0.1.48'
		}
	} else {
		repositories {
			mavenCentral()
			flatDir { dirs '../build/libs' }
		}
		dependencies {
			classpath 'org.hidetake:gradle-ssh-plugin:latest.integration'
			classpath 'com.jcraft:jsch:0.1.48'
		}
	}
}

apply plugin: 'ssh'

ssh {
	config(StrictHostKeyChecking: 'no')
}

remotes {
	localhost {
		host = 'localhost'
		user = System.properties['user.name']
		identity = file("${System.properties['user.home']}/.ssh/id_rsa")
	}
	myhost {
		host = '127.0.0.1'
		user = System.properties['user.name']
		identity = file("${System.properties['user.home']}/.ssh/id_rsa")
	}
}

remoteGroups {
	myservers {
		add remotes.localhost
		add remotes.myhost
	}
}

task showEnvironmentSingle(type: SshTask) {
	description 'execute command on a remote'
	session(remotes.localhost) {
		execute 'env'
	}
}

task showEnvironmentAll(type: SshTask) {
	description 'execute command on remotes'
	session(remoteGroups.myservers) {
		execute 'env'
	}
}

task concurrentExecution(type: SshTask) {
	description 'describes how to execute SSH concurrently'
	session(remotes.localhost) {
		(1..5).each { i ->
			executeBackground "sleep ${i} && echo -n ${i}- && date"
		}
	}
	session(remotes.myhost) {
		executeBackground 'sar 1 5'
	}
}

task executionFailed(type: SshTask) {
	description 'describes error handling'
	session(remotes.localhost) {
		// may be failed
		execute 'touch /root/test'
	}
}

task sshInTask << {
	description 'describes how to execute SSH in the task'
	def command = "env"
	println command
	sshexec {
		session(remotes.localhost) {
			execute command
		}
	}
}
